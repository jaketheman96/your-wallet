{"version":3,"sources":["reducers/user.js","actions/index.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE_USER","email","userReducer","state","action","type","payload","addEmail","fetchApi","a","fetch","response","json","result","infos","Error","message","ADD_CURRENCIES","getCurrencies","dispatch","apiReturned","ADD_EXPENSES","addExpenses","allInfos","exchangeRates","deleteItem","index","INITIAL_STATE_WALLET","currencies","expenses","editor","idToEdit","walletReducer","Object","keys","filter","item","concat","element","id","Number","rootReducer","combineReducers","user","wallet","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","password","isButtonDisabled","handleClick","props","history","push","handleButton","length","match","setState","handleChange","target","name","value","this","className","style","display","color","src","alt","width","htmlFor","onChange","required","onClick","disabled","React","Component","connect","Table","subtractTotal","map","description","tag","method","toFixed","currency","code","ask","Wallet","totalPrice","componentDidMount","event","preventDefault","prev","allStates","sumTotalPrice","total","forEach","alue","defaultValue","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.59c7b538.chunk.js","sourcesContent":["const INITIAL_STATE_USER = {\n  email: '',\n};\n\nconst userReducer = (state = INITIAL_STATE_USER, action) => {\n  const { type, payload } = action;\n  switch (type) {\n  case 'ADD_EMAIL':\n    return {\n      ...state,\n      email: payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","const ADD_EMAIL = 'ADD_EMAIL';\nconst DELETE_ITEM = 'DELETE_ITEM';\n\nconst addEmail = (email) => ({\n  type: ADD_EMAIL,\n  payload: email,\n});\n\nexport default addEmail;\n\nexport const fetchApi = async () => {\n  try {\n    const urlApi = 'https://economia.awesomeapi.com.br/json/all';\n    const response = await fetch(urlApi);\n    const result = await response.json();\n    return {\n      infos: result,\n    };\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const ADD_CURRENCIES = 'ADD_CURRENCIES';\n\nexport const getCurrencies = () => async (dispatch) => {\n  const apiReturned = await fetchApi();\n  const response = apiReturned;\n  dispatch({\n    type: ADD_CURRENCIES,\n    payload: response,\n  });\n};\n\nexport const ADD_EXPENSES = 'ADD_EXPENSES';\n\nexport const addExpenses = (allInfos) => async (dispatch) => {\n  const apiReturned = await fetchApi();\n  allInfos.exchangeRates = apiReturned.infos;\n  dispatch({\n    type: ADD_EXPENSES,\n    payload: allInfos,\n  });\n};\n\nexport const deleteItem = (index) => ({\n  type: DELETE_ITEM,\n  payload: index,\n});\n","import { ADD_CURRENCIES, ADD_EXPENSES } from '../actions/index';\n\nconst INITIAL_STATE_WALLET = {\n  currencies: [],\n  expenses: [],\n  editor: false,\n  idToEdit: 0,\n};\n\nconst walletReducer = (state = INITIAL_STATE_WALLET, action) => {\n  const { type, payload } = action;\n  const { expenses } = state;\n  switch (type) {\n  case ADD_CURRENCIES:\n    return {\n      ...state,\n      currencies: Object.keys(payload.infos).filter((item) => item !== 'USDT'),\n    };\n  case ADD_EXPENSES:\n    return {\n      ...state,\n      expenses: expenses.concat(payload),\n    };\n  case 'DELETE_ITEM':\n    return {\n      ...state,\n      expenses: expenses.filter((element) => element.id !== Number(payload)),\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n\nexport const INICIAL_STATE = {\n  user: {\n    email: '',\n  },\n  wallet: {\n    currencies: [],\n    expenses: [],\n    editor: false,\n    idToEdit: 0,\n  },\n};\n\nconst rootReducer = combineReducers({ user: userReducer, wallet: walletReducer });\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ));\n\nexport default store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport addEmail from '../actions';\n\nclass Login extends React.Component {\n  state = {\n    email: '',\n    password: '',\n    isButtonDisabled: true,\n  }\n\n  handleClick = () => {\n    const { email } = this.state;\n    const { dispatch, history } = this.props;\n    dispatch(addEmail(email));\n    history.push('/carteira');\n  }\n\n  // reference: https://www.w3resource.com/javascript/form/email-validation.php#:~:text=To%20get%20a%20valid%20email,%5D%2B)*%24%2F.\n  handleButton = () => {\n    const emailFormat = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    const { password, email } = this.state;\n    const numLength = 6;\n    if (password.length >= numLength && email.match(emailFormat)) {\n      this.setState({ isButtonDisabled: false });\n    } else {\n      this.setState({ isButtonDisabled: true });\n    }\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => this.handleButton());\n  }\n\n  render() {\n    const { email, password, isButtonDisabled } = this.state;\n    return (\n      <div className=\"login\">\n        <form className=\"loginForm\">\n          <div\n            className=\"wallet-image\"\n            style={ { display: 'flex' } }\n          >\n            <h1\n              style={ { color: 'grey' } }\n            >\n              YourWallet!\n            </h1>\n            <img\n              src=\"https://media.discordapp.net/attachments/971614587029954591/994040120258867220/Design_sem_nome-removebg-preview.png\"\n              alt=\"wallet\"\n              width=\"50%\"\n            />\n          </div>\n          <label\n            htmlFor=\"email\"\n            className=\"labelLogin\"\n          >\n            <p>Email: </p>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={ email }\n              data-testid=\"email-input\"\n              onChange={ this.handleChange }\n              className=\"loginInput\"\n              required\n            />\n          </label>\n          <label\n            htmlFor=\"password\"\n            className=\"labelLogin\"\n          >\n            <p>Password:</p>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              value={ password }\n              data-testid=\"password-input\"\n              onChange={ this.handleChange }\n              className=\"loginInput\"\n              required\n            />\n          </label>\n          <button\n            type=\"submit\"\n            onClick={ this.handleClick }\n            disabled={ isButtonDisabled }\n            className=\"loginButton\"\n          >\n            Entrar\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteItem } from '../actions/index';\n\nclass Table extends React.Component {\n  handleClick = ({ target }) => {\n    const { dispatch, subtractTotal } = this.props;\n    const { id, value } = target;\n    dispatch(deleteItem(id));\n    subtractTotal(value);\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table className=\"redTable\">\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {expenses.map((element) => (\n            <tr key={ element.id }>\n              <td>\n                {element.description}\n              </td>\n              <td>\n                {element.tag}\n              </td>\n              <td>\n                {element.method}\n              </td>\n              <td>\n                {`${Number(element.value).toFixed(2)}`}\n              </td>\n              <td>\n                {element.exchangeRates[element.currency].code}\n              </td>\n              <td>\n                {Number(element.exchangeRates[element.currency].ask).toFixed(2)}\n              </td>\n              <td id=\"value-converted\">\n                {`${Number(element.value * element.exchangeRates[element.currency].ask)\n                  .toFixed(2)} BRL`}\n              </td>\n              <td>\n                {element.exchangeRates[element.currency].name}\n              </td>\n              <td>\n                <button\n                  type=\"button\"\n                  data-testid=\"delete-btn\"\n                  onClick={ this.handleClick }\n                  id={ element.id }\n                  value={\n                    Number(element.value * element.exchangeRates[element.currency].ask)\n                  }\n                >\n                  X\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape(\n    PropTypes.string.isRequired,\n  ).isRequired).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  subtractTotal: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  const { expenses } = state.wallet;\n  return {\n    ...state,\n    expenses,\n  };\n};\n\nexport default connect(mapStateToProps, null)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addExpenses, getCurrencies } from '../actions';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  state = {\n    id: 0,\n    value: 0,\n    currency: 'USD',\n    method: '',\n    tag: '',\n    description: '',\n    totalPrice: 0,\n  }\n\n  componentDidMount = () => {\n    const { dispatch } = this.props;\n    const result = getCurrencies();\n    dispatch(result);\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  handleClick = async (event) => {\n    event.preventDefault();\n    const { dispatch } = this.props;\n    const { id,\n      value,\n      description,\n      currency,\n      method,\n      tag } = this.state;\n    this.setState((prev) => ({\n      id: prev.id + 1,\n    }));\n    const allStates = { id, value, description, currency, method, tag };\n    await dispatch(addExpenses(allStates));\n    await this.sumTotalPrice();\n  }\n\n  sumTotalPrice = async () => {\n    const { wallet: { expenses } } = this.props;\n    if (!expenses) {\n      this.setState({ totalPrice: 0 });\n    } else {\n      let result = 0;\n      expenses\n        .map((total) => (\n          total.value * total.exchangeRates[total.currency].ask))\n        .forEach((element) => {\n          result += element;\n        });\n      this.setState({\n        totalPrice: result.toFixed(2),\n        value: 0,\n        description: '',\n        currency: 'USD',\n        method: '',\n        tag: '',\n      });\n    }\n  }\n\n  subtractTotal = (value) => {\n    this.setState((prev) => ({\n      totalPrice: (prev.totalPrice - value).toFixed(2),\n    }));\n  }\n\n  render() {\n    const {\n      user,\n      wallet: { currencies },\n    } = this.props;\n    const {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      totalPrice,\n    } = this.state;\n    return (\n      <div>\n        <div\n          className=\"user-infos\"\n        >\n          <h3 data-testid=\"email-field\" className=\"header-infos\">\n            {`Ola ${user}`}\n          </h3>\n          <h3 data-testid=\"total-field\" className=\"header-infos\">\n            {`Total: ${totalPrice} BRL`}\n          </h3>\n        </div>\n        <form className=\"form-expenses\">\n          <label htmlFor=\"value\">\n            <h3>Valor:</h3>\n            <input\n              type=\"number\"\n              id=\"value\"\n              name=\"value\"\n              data-testid=\"value-input\"\n              onChange={ this.handleChange }\n              value={ value }\n              className=\"login-input\"\n            />\n          </label>\n          <label htmlFor=\"currency\" aria-label=\"Moeda\">\n            <h3>Moeda</h3>\n            <select\n              id=\"currency\"\n              name=\"currency\"\n              onChange={ this.handleChange }\n              alue={ currency }\n            >\n              {currencies.map((element) => (\n                <option\n                  value={ element }\n                  key={ element }\n                >\n                  {element}\n                </option>\n              ))}\n            </select>\n          </label>\n          <label\n            htmlFor=\"method\"\n          >\n            <h3>Metodo de pagamento:</h3>\n            <select\n              data-testid=\"method-input\"\n              id=\"method\"\n              name=\"method\"\n              onChange={ this.handleChange }\n              value={ method }\n            >\n              <option defaultValue=\"\">None selected</option>\n              <option value=\"Cartão de crédito\">Cartão de crédito</option>\n              <option value=\"Dinheiro\">Dinheiro</option>\n              <option value=\"Cartão de débito\">Cartão de débito</option>\n            </select>\n          </label>\n          <label\n            htmlFor=\"tag\"\n          >\n            <h3>Categoria:</h3>\n            <select\n              data-testid=\"tag-input\"\n              id=\"tag\"\n              onChange={ this.handleChange }\n              value={ tag }\n              name=\"tag\"\n            >\n              <option defaultValue=\"\">None selected</option>\n              <option value=\"Lazer\">Lazer</option>\n              <option value=\"Alimentação\">Alimentação</option>\n              <option value=\"Trabalho\">Trabalho</option>\n              <option value=\"Transporte\">Transporte</option>\n              <option value=\"Saúde\">Saúde</option>\n            </select>\n          </label>\n          <label htmlFor=\"description\">\n            <h3>Descrição:</h3>\n            <input\n              type=\"text\"\n              id=\"description\"\n              name=\"description\"\n              data-testid=\"description-input\"\n              onChange={ this.handleChange }\n              value={ description }\n              className=\"login-input\"\n            />\n          </label>\n          <button\n            type=\"submit\"\n            className=\"add-expenses\"\n            onClick={ this.handleClick }\n          >\n            Adicionar despesa\n          </button>\n        </form>\n        <Table subtractTotal={ this.subtractTotal } />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  const { email } = state.user;\n  return {\n    ...state,\n    user: email,\n    wallet: state.wallet,\n  };\n};\nWallet.propTypes = {\n  user: PropTypes.string.isRequired,\n  wallet: PropTypes.shape({\n    expenses: PropTypes.arrayOf(PropTypes.shape(\n      PropTypes.string.isRequired,\n    ).isRequired),\n    currencies: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}